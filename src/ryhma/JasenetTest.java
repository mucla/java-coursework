package ryhma;
// Generated by ComTest BEGIN
import java.io.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import ryhma.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2017.07.12 15:23:46 // Generated by ComTest
 *
 */
public class JasenetTest {


  // Generated by ComTest BEGIN  // Jasenet: 29

  private Jasenet jasenet; 
  private String tiedNimi; 
  private File ftied; 

  @Before
  public void alusta() throws SailoException {
     tiedNimi = "testiryhma"; 
     ftied = new File(tiedNimi+".db"); 
     ftied.delete(); 
     jasenet = new Jasenet(tiedNimi); 
  }

  @After
  public void siivoa() {
     ftied.delete(); 
  }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa95 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa95() throws SailoException {    // Jasenet: 95
    Collection<Jasen> loytyneet = jasenet.etsi("", 1); 
    assertEquals("From: Jasenet line: 99", 0, loytyneet.size()); 
    Jasen aku1 = new Jasen(), aku2 = new Jasen(); 
    jasenet.lisaa(aku1); 
    jasenet.lisaa(aku2); 
    loytyneet = jasenet.etsi("", 1); 
    assertEquals("From: Jasenet line: 106", 2, loytyneet.size()); 
    try {
    jasenet.lisaa(aku1); 
    fail("Jasenet: 108 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); } //ei voi lisätä samaa jäsentä uudelleen
    Jasen aku3 = new Jasen(); Jasen aku4 = new Jasen(); Jasen aku5 = new Jasen(); 
    jasenet.lisaa(aku3); 
    jasenet.lisaa(aku4); 
    jasenet.lisaa(aku5); 
    loytyneet = jasenet.etsi("", 1); 
    assertEquals("From: Jasenet line: 115", 5, loytyneet.size()); 
    Iterator<Jasen> i = loytyneet.iterator(); 
    assertEquals("From: Jasenet line: 117", aku1, i.next()); 
    assertEquals("From: Jasenet line: 118", aku2, i.next()); 
    assertEquals("From: Jasenet line: 119", aku3, i.next()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi181 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi181() throws SailoException {    // Jasenet: 181
    Jasen aku1 = new Jasen(); aku1.taytaAkuAnkka(); 
    Jasen aku2 = new Jasen(); aku2.taytaAkuAnkka(); 
    jasenet.lisaa(aku1); 
    jasenet.lisaa(aku2); 
    try {
    jasenet.lisaa(aku2); 
    fail("Jasenet: 188 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); } // ei saa lisätä sama id:tä uudelleen
    Collection<Jasen> loydetyt; 
    loydetyt = jasenet.etsi("Ankka",1); 
    assertEquals("From: Jasenet line: 191", 2, loydetyt.size()); 
    assertEquals("From: Jasenet line: 192", aku1, loydetyt.iterator().next()); 
    loydetyt = jasenet.etsi(aku1.getNimi(), 1); 
    assertEquals("From: Jasenet line: 194", 2, loydetyt.size());  //koska nimi on sama, löydetään kaksi
    Iterator<Jasen> i = loydetyt.iterator(); 
    assertEquals("From: Jasenet line: 196", aku1, i.next()); 
    assertEquals("From: Jasenet line: 197", aku2, i.next()); 
    loydetyt = jasenet.etsi(""+aku2.getTunnusNro(), 0); 
    assertEquals("From: Jasenet line: 199", 1, loydetyt.size()); 
    assertEquals("From: Jasenet line: 200", aku2, loydetyt.iterator().next()); 
    try {
    loydetyt = jasenet.etsi("",9); 
    fail("Jasenet: 201 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    ftied.delete(); 
  } // Generated by ComTest END
}